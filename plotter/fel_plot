#!/usr/bin/env python3

"""
File
    Line 1: z
    Line 2: b_n
    Line 3: a
    Line 4+: theta
    Line e+: p
"""
import sys

if len(sys.argv) <= 2:
	exit(2)

import numpy as np
from matplotlib import pyplot as plt

try:
    data = np.genfromtxt( sys.argv[1], delimiter=',')
except:
    print("\nE: Can't load file '" + sys.argv[1] + "'");
    exit(0)

z = data[0,:]

for i in range(2, len(sys.argv)):
    # Plot a
    if sys.argv[i] == "-a":
        a = data[2,:]
        plt.plot(z,a,'-b')
        plt.yscale('log')
        plt.xlabel("$z\u0305$", size='xx-large')
        plt.ylabel("$\u0251$", size='xx-large')
        plt.grid(which='both')
        plt.show()

    # Plot phi
    elif sys.argv[i] == "-phi":
        phi = data[3,:]
        plt.plot(z,phi,'-b')
        plt.xlabel("$z\u0305$", size='xx-large')
        plt.ylabel("$\u03C6$", size='xx-large')
        plt.grid(which='both')
        plt.show()

    # Phot phase space
    elif sys.argv[i] == "-pha":
        ELE_NUM = int( (len( data[ : , 0 ] ) -4)/2 )
        position = float(sys.argv[i+1])
        point = int( position*(len(z)-1)/z[-2])
        if( point > len(z)-1 ):
            point = len(z)-1
        theta = data[ 4:(ELE_NUM+4), point ]
        p = data[ (ELE_NUM+4):, point ]
        a = data[ 2, point ]
        phi = data[ 3, point ]

        # Seperatrix
        data_r = np.linspace(0, 2*np.pi, 1000)
        plt.plot( data_r, np.sqrt( ((2*a)**2)*(1 - np.sin( data_r + phi ))  ), '-b')
        plt.plot( data_r, -np.sqrt( ((2*a)**2)*(1 - np.sin( data_r + phi ))  ), '-b')

        # Main plot
        plt.plot( theta%(2*np.pi), p, '.r' );
        if np.abs( float(plt.axis()[3])) < 0.5 or np.abs( float(plt.axis()[2])) < 0.5 :
            plt.ylim( -0.5,0.5)
        plt.xlim(0, 2*np.pi )
        plt.xlabel("$\u03B8$", size='xx-large')
        plt.ylabel("$p$", size='xx-large')
        plt.grid(which='both')
        plt.show()

    elif sys.argv[i] == "-bp":
        b_n = data[ 1, : ]

        plt.plot( z, b_n )
        plt.yscale('log')
        plt.xlabel("$z\u0305$", size='x-large')
        plt.ylabel("$b_n$", size='x-large')
        plt.grid(which='both')
        plt.show()
